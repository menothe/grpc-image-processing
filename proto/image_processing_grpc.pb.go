// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: proto/image_processing.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ImageProcessor_ConvertImage_FullMethodName = "/ImageProcessor/ConvertImage"
)

// ImageProcessorClient is the client API for ImageProcessor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImageProcessorClient interface {
	// RPC method to convert an image to grayscale
	ConvertImage(ctx context.Context, in *ConvertImageRequest, opts ...grpc.CallOption) (*ConvertImageResponse, error)
}

type imageProcessorClient struct {
	cc grpc.ClientConnInterface
}

func NewImageProcessorClient(cc grpc.ClientConnInterface) ImageProcessorClient {
	return &imageProcessorClient{cc}
}

func (c *imageProcessorClient) ConvertImage(ctx context.Context, in *ConvertImageRequest, opts ...grpc.CallOption) (*ConvertImageResponse, error) {
	out := new(ConvertImageResponse)
	err := c.cc.Invoke(ctx, ImageProcessor_ConvertImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageProcessorServer is the server API for ImageProcessor service.
// All implementations must embed UnimplementedImageProcessorServer
// for forward compatibility
type ImageProcessorServer interface {
	// RPC method to convert an image to grayscale
	ConvertImage(context.Context, *ConvertImageRequest) (*ConvertImageResponse, error)
	mustEmbedUnimplementedImageProcessorServer()
}

// UnimplementedImageProcessorServer must be embedded to have forward compatible implementations.
type UnimplementedImageProcessorServer struct {
}

func (UnimplementedImageProcessorServer) ConvertImage(context.Context, *ConvertImageRequest) (*ConvertImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertImage not implemented")
}
func (UnimplementedImageProcessorServer) mustEmbedUnimplementedImageProcessorServer() {}

// UnsafeImageProcessorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageProcessorServer will
// result in compilation errors.
type UnsafeImageProcessorServer interface {
	mustEmbedUnimplementedImageProcessorServer()
}

func RegisterImageProcessorServer(s grpc.ServiceRegistrar, srv ImageProcessorServer) {
	s.RegisterService(&ImageProcessor_ServiceDesc, srv)
}

func _ImageProcessor_ConvertImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConvertImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageProcessorServer).ConvertImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageProcessor_ConvertImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageProcessorServer).ConvertImage(ctx, req.(*ConvertImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImageProcessor_ServiceDesc is the grpc.ServiceDesc for ImageProcessor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImageProcessor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ImageProcessor",
	HandlerType: (*ImageProcessorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConvertImage",
			Handler:    _ImageProcessor_ConvertImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/image_processing.proto",
}
